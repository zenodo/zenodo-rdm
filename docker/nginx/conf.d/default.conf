# This nginx configuration defines two servers, one on port 80 and one on port
# 443. All traffic on port 80 is redirected to port 443 on SSL.
#
# Nginx proxies all requests on port 443 to upstream the application server
# which is expected to be running on port 5000.

upstream ui_server {
  server web-ui:5000 fail_timeout=0;
}
upstream api_server {
  server web-api:5000 fail_timeout=0;
}
upstream image_server {
  server iipserver:9000 fail_timeout=0;
}

# increase default max size of `map`
map_hash_max_size 10000;
map_hash_bucket_size 10000;

# Crawler rate-limiting
map $http_user_agent $limit_bot {
  default "";
  ~*(Googlebot) $http_user_agent;
}
limit_req_zone $limit_bot zone=bots:10m rate=30r/m;
limit_req_status 429;
limit_req zone=bots burst=5 nodelay;

# HTTP server
server {
  # Redirects all requests to https. - this is in addition to HAProxy which
  # already redirects http to https. This redirect is needed in case you access
  # the server directly (e.g. useful for debugging).
  listen 80; # IPv4
  listen [::]:80; # IPv6
  server_name _;
  return 301 https://$host$request_uri;
}

# HTTPS server
server {
  listen 443 ssl http2; # IPv4
  listen [::]:443 ssl http2; # IPv6
  server_name _;
  charset utf-8;
  keepalive_timeout 5;

  # SSL configuration according to best practices from
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/
  # The provided certificate (test.crt) and private key (test.key) is only for
  # testing and must never be used in production environment.
  ssl_certificate /etc/ssl/certs/test.crt;
  ssl_certificate_key /etc/ssl/private/test.key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # Accepted protocols and ciphers
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  add_header Strict-Transport-Security "max-age=15768000"; # 6 months

  # Request ID tracing (allows end-to-end tracking of requests for better
  # troubleshooting)
  add_header X-Request-ID $request_id;

  # The request body is sent to the proxied server immediately as it is
  # received
  proxy_request_buffering off;
  # Sets the HTTP protocol v1.1 for proxying in order to not use the buffer
  # in case of chunked transfer encoding
  proxy_http_version 1.1;

  # Proxying to the application server
  # Two locations are defined in order to allow large file uploads in the files
  # API without exposing the other parts of the application to receive huge
  # request bodies.
  location / {
    uwsgi_pass ui_server;
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Pass request id to the ui server
    uwsgi_param X-Request-ID $request_id;
    # X-Session-ID / X-User-ID is read by nginx and included in the logs,
    # however we don't want to expose them to clients so we are hiding them.
    uwsgi_hide_header X-Session-ID;
    uwsgi_hide_header X-User-ID;
    # Max upload size (except for files) is set to 100mb as default.
    client_max_body_size 100m;
  }

  location /api {
    uwsgi_pass api_server;
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Pass request id to the api server
    uwsgi_param X-Request-ID $request_id;
    # X-Session-ID / X-User-ID is read by nginx and included in the logs,
    # however we don't want to expose them to clients so we are hiding them.
    uwsgi_hide_header X-Session-ID;
    uwsgi_hide_header X-User-ID;
    # Max upload size (except for files) is set to 100mb as default.
    client_max_body_size 100m;
  }

  location /api/files {
    gzip off;
    uwsgi_pass api_server;
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Pass request id to api server
    uwsgi_param X-Request-ID $request_id;
    # X-Session-ID / X-User-ID is read by nginx and included in the logs,
    # however we don't want to expose them to clients so we are hiding them.
    uwsgi_hide_header X-Session-ID;
    uwsgi_hide_header X-User-ID;
    # Max upload size for files is set to 50GB (configure as needed).
    client_max_body_size 50G;
  }

  location /api/iiif {

    # Server IIIF Presentation layer through the API server. These URLs include:
    #   - /api/iiif/{uuid}/manifest
    #   - /api/iiif/{uuid}/sequence/default
    #   - /api/iiif/{uuid}/canvas/{filename}
    location ~ /api/iiif/.+/(manifest|sequence/default|canvas/.+) {
      uwsgi_pass api_server;
      include uwsgi_params;
      uwsgi_buffering off;
      uwsgi_request_buffering off;
      uwsgi_param Host $host;
      uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
      uwsgi_param X-Forwarded-Proto $scheme;
      # Pass request id to the api server
      uwsgi_param X-Request-ID $request_id;
      # X-Session-ID / X-User-ID is read by nginx and included in the logs,
      # however we don't want to expose them to clients so we are hiding them.
      uwsgi_hide_header X-Session-ID;
      uwsgi_hide_header X-User-ID;
    }

    location ~ /api/iiif/record:(?<recid>.+):(?<filename>.+)/(?<end>info.json|(.+/)(.+/)(.+/)(.+\..+)) {
      set $ch1 ""; set $ch2 "_"; set $ch3 "_"; set $ch4 "_";
      set $tail "";
      set $endChar "_";

      # Partition the recid:
      #
      #   - 1       -> 1_/__/_/
      #   - 12      -> 12/__/_/
      #   - 123     -> 12/__/_/
      #   - 1234    -> 12/34/_/
      #   - 12345   -> 12/34/5_/
      #   - 123456  -> 12/34/56_/
      #   - 1234567 -> 12/34/567_/
      if ($recid ~ "(?<ch1>[a-zA-Z0-9\-])(?<ch2>[a-zA-Z0-9\-])?(?<ch3>[a-zA-Z0-9\-])?(?<ch4>[a-zA-Z0-9\-])?(?<tail>[a-zA-Z0-9\-]*)") {
        set $ch1 $1; set $ch2 $2; set $ch3 $3; set $ch4 $4;
        set $tail $5;
      }

      # Reset parts
      if ($ch2 = "") { set $ch2 "_"; }
      if ($ch3 = "") { set $ch3 "_"; }
      if ($ch4 = "") { set $ch4 "_"; }

      # Keep the original URI to pass to the fallback location in case of error
      set $original_uri $request_uri;
      # Construct the final URL. This converts:
      #
      #   - /api/iiif/record:1:image.png/... -> /api/iiif/1_/__/_/image.png.ptif/...
      #   - /api/iiif/record:1234:image.png/... -> /api/iiif/12/34/_/image.png.ptif/...
      #   - /api/iiif/record:123456:image.png/... -> /api/iiif/12/34/56_/image.png.ptif/...
      rewrite "^/.+$" "/iip?IIIF=/$ch1$ch2/$ch3$ch4/$tail$endChar/$filename.ptif/$end" break;

      fastcgi_pass image_server;
      include fastcgi_params;

      fastcgi_buffering off;

      fastcgi_param PATH_INFO $fastcgi_script_name;
      fastcgi_param REQUEST_METHOD $request_method;
      fastcgi_param QUERY_STRING $query_string;
      fastcgi_param CONTENT_TYPE $content_type;
      fastcgi_param CONTENT_LENGTH $content_length;
      fastcgi_param SERVER_PROTOCOL $server_protocol;
      fastcgi_param REQUEST_URI $request_uri;
      fastcgi_param HTTPS $https if_not_empty;

      # In case of an error, fallback to the Flask/Invenio application
      fastcgi_intercept_errors on;
      error_page 404 500 502 503 504 = @iiif_fallback;
    }
  }

  location @iiif_fallback {
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Pass request id to the api server
    uwsgi_param X-Request-ID $request_id;
    # X-Session-ID / X-User-ID is read by nginx and included in the logs,
    # however we don't want to expose them to clients so we are hiding them.
    uwsgi_hide_header X-Session-ID;
    uwsgi_hide_header X-User-ID;

    # Restore the original IIIF URI
    rewrite "^/.+$" "$original_uri" break;
    uwsgi_param REQUEST_URI $original_uri;
    uwsgi_pass api_server;
  }

  # Static content is served directly by nginx and not the application server.
  location /static {
    alias /opt/invenio/var/instance/static;
    autoindex off;
  }
  # Robots.txt file is served by nginx.
  location /robots.txt {
    alias /opt/invenio/var/instance/static/robots.txt;
    autoindex off;
  }
}
