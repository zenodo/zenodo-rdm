# -*- coding: utf-8 -*-
#
# Copyright (C) 2023 CERN.
#
# Invenio-RDM-Migrator is free software; you can redistribute it and/or modify
# it under the terms of the MIT License; see LICENSE file for more details.

"""Invenio RDM migration files actions module."""


from invenio_rdm_migrator.actions import TransformAction
from invenio_rdm_migrator.load.postgresql.transactions.operations import OperationType
from invenio_rdm_migrator.streams.actions import load


class DraftFileUploadAction(TransformAction):
    """Zenodo to RDM file upload action."""

    name = "draft-upload-file"
    load_cls = load.DraftFileUploadAction

    @classmethod
    def matches_action(cls, tx):
        """Checks if the data corresponds with that required by the action.

        Should contain two updates on the bucket (updated, size), the creation
        and the link to the file_id (update) on the object version, and the creation and commit
        (update) of the file instance.
        """
        rules = {
            "files_bucket": [OperationType.UPDATE, OperationType.UPDATE],
            "files_object": [OperationType.UPDATE, OperationType.INSERT],  # lifo
            "files_files": [OperationType.UPDATE, OperationType.INSERT],  # lifo
        }

        for operation in tx.operations:
            table_name = operation["source"]["table"]
            try:
                rule = rules[table_name].pop()
                if not rule == operation["op"]:
                    return False
            except (KeyError, IndexError):
                return False

        for ops in rules.values():  # check that rules were exhausted
            if len(ops) > 0:
                return False

        return True

    def _transform_data(self):
        """Transforms the data and returns an instance of the mapped_cls."""
        bucket = {}
        ov = {}
        fi = {}
        for operation in self.tx.operations:
            table_name = operation["source"]["table"]
            self._microseconds_to_isodate(
                data=operation["after"], fields=["created", "updated"]
            )

            if table_name == "files_bucket":
                bucket = {**bucket, **operation["after"]}
            elif table_name == "files_object":
                ov = {**ov, **operation["after"]}
            elif table_name == "files_files":
                fi = {**fi, **operation["after"]}

        fr = {
            "id": None,  # generated by the load action
            "json": {},
            "created": ov["created"],
            "updated": ov["updated"],
            "version_id": 1,
            "key": ov["key"],
            "record_id": None,  # calculated by the load action
            "object_version_id": ov["version_id"],
        }
        return dict(
            tx_id=self.tx.id,
            bucket=bucket,
            object_version=ov,
            file_instance=fi,
            file_record=fr,
        )


FILES_ACTIONS = [
    DraftFileUploadAction,
]
